{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red194\green126\blue101;\red23\green23\blue23;\red202\green202\blue202;
\red183\green111\blue179;\red89\green138\blue67;\red70\green137\blue204;\red212\green214\blue154;\red167\green197\blue152;
\red67\green192\blue160;}
{\*\expandedcolortbl;;\cssrgb\c80784\c56863\c47059;\cssrgb\c11765\c11765\c11765;\cssrgb\c83137\c83137\c83137;
\cssrgb\c77255\c52549\c75294;\cssrgb\c41569\c60000\c33333;\cssrgb\c33725\c61176\c83922;\cssrgb\c86275\c86275\c66667;\cssrgb\c70980\c80784\c65882;
\cssrgb\c30588\c78824\c69020;}
\margl1440\margr1440\vieww18920\viewh25740\viewkind0
\deftab720
\pard\pardeftab720\sl360\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 """\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 This is here to illustrate using Python exceptions\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2 """\cf4 \cb1 \strokec4 \
\
\cf5 \cb3 \strokec5 from\cf4 \strokec4  decimal \cf5 \strokec5 import\cf4 \strokec4  Decimal\cb1 \
\
\cf6 \cb3 \strokec6 #original function\cf4 \cb1 \strokec4 \
\cf6 \cb3 \strokec6 #just here for reference\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7 def\cf4 \strokec4  \cf8 \strokec8 right_circular_cylinder_column_menu\cf4 \strokec4 ():\cb1 \
\cb3     \cf2 \strokec2 """\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2     Asks the user for cylinder radius and cylinder height\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2     """\cf4 \cb1 \strokec4 \
\cb3     radius = \cf7 \strokec7 None\cf4 \cb1 \strokec4 \
\cb3     height = \cf7 \strokec7 None\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 while\cf4 \strokec4  \cf7 \strokec7 not\cf4 \strokec4  radius:\cb1 \
\cb3         radius = \cf8 \strokec8 input\cf4 \strokec4 (\cf2 \strokec2 "Radius (must be a positive number: "\cf4 \strokec4 )\cb1 \
\cb3         \cf5 \strokec5 if\cf4 \strokec4  \cf7 \strokec7 not\cf4 \strokec4  radius.isdecimal():\cb1 \
\cb3             radius = \cf7 \strokec7 None\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 elif\cf4 \strokec4  \cf7 \strokec7 not\cf4 \strokec4  Decimal(radius) > \cf9 \strokec9 0\cf4 \strokec4 :\cb1 \
\cb3             radius = \cf7 \strokec7 None\cf4 \cb1 \strokec4 \
\cb3     radius = Decimal(radius)\cb1 \
\
\cb3     \cf5 \strokec5 while\cf4 \strokec4  \cf7 \strokec7 not\cf4 \strokec4  height:\cb1 \
\cb3         height = \cf8 \strokec8 input\cf4 \strokec4 (\cf2 \strokec2 "Height (must be a positive number): "\cf4 \strokec4 )\cb1 \
\cb3         \cf5 \strokec5 if\cf4 \strokec4  \cf7 \strokec7 not\cf4 \strokec4  height.isdecimal():\cb1 \
\cb3             height = \cf7 \strokec7 None\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 elif\cf4 \strokec4  \cf7 \strokec7 not\cf4 \strokec4  Decimal(height) > \cf9 \strokec9 0\cf4 \strokec4 :\cb1 \
\cb3             height = \cf7 \strokec7 None\cf4 \cb1 \strokec4 \
\cb3     height = Decimal(height)\cb1 \
\
\cb3     \cf5 \strokec5 return\cf4 \strokec4  radius, height\cb1 \
\
\
\cf6 \cb3 \strokec6 #this function uses exceptions\cf4 \cb1 \strokec4 \
\cf7 \cb3 \strokec7 def\cf4 \strokec4  \cf8 \strokec8 e_right_circular_cylinder_column_menu\cf4 \strokec4 ():\cb1 \
\cb3     \cf2 \strokec2 """\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2     Asks the user for cylinder radius and cylinder height\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2     Using exceptions for input checking\cf4 \cb1 \strokec4 \
\cf2 \cb3 \strokec2     """\cf4 \cb1 \strokec4 \
\cb3     radius = \cf7 \strokec7 None\cf4 \cb1 \strokec4 \
\cb3     height = \cf7 \strokec7 None\cf4 \cb1 \strokec4 \
\
\cb3     \cf5 \strokec5 while\cf4 \strokec4  \cf7 \strokec7 not\cf4 \strokec4  radius:\cb1 \
\cb3         \cf5 \strokec5 try\cf4 \strokec4 :\cb1 \
\cb3             radius = \cf10 \strokec10 int\cf4 \strokec4 (\cf8 \strokec8 input\cf4 \strokec4 (\cf2 \strokec2 "Radius (must be a positive integer): "\cf4 \strokec4 ))\cb1 \
\cb3             \cf5 \strokec5 if\cf4 \strokec4  radius > \cf9 \strokec9 0\cf4 \strokec4 :\cb1 \
\cb3                 \cf5 \strokec5 break\cf4 \cb1 \strokec4 \
\cb3             \cf8 \strokec8 print\cf4 \strokec4 (\cf2 \strokec2 "You must enter a positive integer."\cf4 \strokec4 )\cb1 \
\cb3             radius = \cf7 \strokec7 None\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 except\cf4 \strokec4  \cf10 \strokec10 ValueError\cf4 \strokec4 :\cb1 \
\cb3             \cf8 \strokec8 print\cf4 \strokec4 (\cf2 \strokec2 "You must enter a positive integer."\cf4 \strokec4 )\cb1 \
\cb3     radius = Decimal(radius)\cb1 \
\
\cb3     \cf5 \strokec5 while\cf4 \strokec4  \cf7 \strokec7 not\cf4 \strokec4  height:\cb1 \
\cb3         \cf5 \strokec5 try\cf4 \strokec4 :\cb1 \
\cb3             height = \cf10 \strokec10 int\cf4 \strokec4 (\cf8 \strokec8 input\cf4 \strokec4 (\cf2 \strokec2 "Height (must be a positive integer): "\cf4 \strokec4 ))\cb1 \
\cb3             \cf5 \strokec5 if\cf4 \strokec4  height > \cf9 \strokec9 0\cf4 \strokec4 :\cb1 \
\cb3                 \cf5 \strokec5 break\cf4 \cb1 \strokec4 \
\cb3             \cf8 \strokec8 print\cf4 \strokec4 (\cf2 \strokec2 "You must enter a positive integer."\cf4 \strokec4 )\cb1 \
\cb3             height = \cf7 \strokec7 None\cf4 \cb1 \strokec4 \
\cb3         \cf5 \strokec5 except\cf4 \strokec4  \cf10 \strokec10 ValueError\cf4 \strokec4 :\cb1 \
\cb3             \cf8 \strokec8 print\cf4 \strokec4 (\cf2 \strokec2 "You must enter a positive integer."\cf4 \strokec4 )\cb1 \
\cb3     height = Decimal(height)\cb1 \
\
\cb3     \cf5 \strokec5 return\cf4 \strokec4  radius, height\cb1 \
\
\cb3 args = e_right_circular_cylinder_column_menu()\cb1 \
\
\cf8 \cb3 \strokec8 print\cf4 \strokec4 (args)\cb1 \
\
}